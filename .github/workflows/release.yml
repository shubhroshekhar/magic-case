name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.1)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Sync dependencies
        working-directory: python
        run: uv sync --no-progress

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate version in pyproject.toml
        working-directory: python
        run: |
          PROJECT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          if [ "$PROJECT_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "Error: Version mismatch!"
            echo "Tag version: ${{ steps.version.outputs.version }}"
            echo "Project version: $PROJECT_VERSION"
            exit 1
          fi

      - name: Run tests
        working-directory: python
        run: uv run pytest -q

      - name: Run linting
        working-directory: python
        run: uv run ruff check .

      - name: Run formatting check
        working-directory: python
        run: uv run ruff format --check .

      - name: Build package
        working-directory: python
        run: uv run python -m build

      - name: Create Release
        id: create_release
        run: |
          gh release create v${{ steps.version.outputs.version }} \
            --title "Release v${{ steps.version.outputs.version }}" \
            --notes "## What's Changed

          Release v${{ steps.version.outputs.version }}

          ### Features
          - Add your features here

          ### Bug Fixes
          - Add your bug fixes here

          ### Documentation
          - Add your documentation updates here" \
            --draft=false \
            --prerelease=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Source Distribution
        run: |
          gh release upload v${{ steps.version.outputs.version }} \
            python/dist/magic_case-${{ steps.version.outputs.version }}.tar.gz \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Wheel Distribution
        run: |
          gh release upload v${{ steps.version.outputs.version }} \
            python/dist/magic_case-${{ steps.version.outputs.version }}-py3-none-any.whl \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        working-directory: python
        run: |
          # Install twine for PyPI upload
          uv add --dev twine
          
          # Upload to PyPI
          uv run twine upload --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} dist/*
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
