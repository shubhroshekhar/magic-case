name: Python tests

on:
  push:
    branches: [ "**" ]
    paths:
      - "python/**"
      - ".github/workflows/python-tests.yml"
  pull_request:
    paths:
      - "python/**"
      - ".github/workflows/python-tests.yml"

permissions:
  contents: read

concurrency:
  group: python-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      UV_PYTHON: python
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        task: ["test", "lint"]
    defaults:
      run:
        working-directory: python
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Sync dependencies
        run: uv sync --no-progress

      - name: Run tests
        if: matrix.task == 'test'
        run: uv run pytest -q

      - name: Run linting
        if: matrix.task == 'lint'
        run: uv run ruff check .

      - name: Run formatting check
        if: matrix.task == 'lint'
        run: uv run ruff format --check .

  release:
    needs: tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/prod'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Sync dependencies
        working-directory: python
        run: uv sync --no-progress

      - name: Get version from pyproject.toml
        working-directory: python
        id: version
        run: |
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag already exists
        if: steps.check_tag.outputs.tag_exists == 'true'
        run: echo "Tag v${{ steps.version.outputs.version }} already exists, skipping tag creation"


