name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.2.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (test without publishing)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Sync dependencies
        working-directory: python
        run: uv sync --no-progress

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate version in pyproject.toml
        working-directory: python
        run: |
          PROJECT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          if [ "$PROJECT_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "Error: Version mismatch!"
            echo "Tag version: ${{ steps.version.outputs.version }}"
            echo "Project version: $PROJECT_VERSION"
            exit 1
          fi

      - name: Run tests
        working-directory: python
        run: uv run pytest -q

      - name: Run linting
        working-directory: python
        run: uv run ruff check .

      - name: Build package
        working-directory: python
        run: uv run python -m build

      - name: Verify package
        working-directory: python
        run: |
          uv run twine check dist/*

      - name: Publish to PyPI (Test)
        if: github.event.inputs.dry_run == 'true'
        working-directory: python
        run: |
          echo "DRY RUN: Would publish to PyPI Test"
          echo "Package files:"
          ls -la dist/
          echo "Would run: twine upload --repository testpypi --username __token__ --password \$PYPI_API_TOKEN dist/*"
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish to PyPI Test
        if: github.event.inputs.dry_run == 'true'
        working-directory: python
        run: |
          uv run twine upload --repository testpypi --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} dist/*
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish to PyPI
        if: github.event.inputs.dry_run != 'true'
        working-directory: python
        run: |
          uv run twine upload --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} dist/*
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish Summary
        run: |
          echo "ðŸŽ‰ Package published successfully!"
          echo "Version: ${{ steps.version.outputs.version }}"
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "Published to: PyPI Test (https://test.pypi.org/project/magic-case/)"
          else
            echo "Published to: PyPI (https://pypi.org/project/magic-case/)"
          fi
